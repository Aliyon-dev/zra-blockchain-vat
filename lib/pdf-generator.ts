import jsPDF from 'jspdf'

interface InvoiceData {
  invoiceId: string
  supplierTpin: string
  buyerTpin: string
  amount: number
  vat: number
  hash: string
  timestamp: string
  qrCode: string
}

export async function generateInvoicePDF(data: InvoiceData): Promise<void> {
  const pdf = new jsPDF()

  // Set up fonts and colors
  pdf.setFont('helvetica')

  // Header
  pdf.setFontSize(24)
  pdf.setTextColor(41, 128, 185) // Primary blue
  pdf.text('VAT INVOICE', 20, 30)

  // Invoice details section
  pdf.setFontSize(16)
  pdf.setTextColor(0, 0, 0)
  pdf.text('Invoice Details', 20, 50)

  // Invoice data
  pdf.setFontSize(12)
  let yPosition = 70

  const details = [
    { label: 'Invoice ID:', value: data.invoiceId },
    { label: 'Supplier TPIN:', value: data.supplierTpin },
    { label: 'Buyer TPIN:', value: data.buyerTpin },
    { label: 'Amount:', value: `ZMW ${data.amount}` },
    { label: 'VAT:', value: `${data.vat}%` },
    { label: 'VAT Amount:', value: `ZMW ${((data.amount * data.vat) / 100).toFixed(2)}` },
    { label: 'Total Amount:', value: `ZMW ${(data.amount * (1 + data.vat / 100)).toFixed(2)}` },
    { label: 'Blockchain Hash:', value: data.hash.substring(0, 32) + '...' },
    { label: 'Timestamp:', value: data.timestamp },
  ]

  details.forEach((detail) => {
    pdf.setTextColor(100, 100, 100)
    pdf.text(detail.label, 20, yPosition)
    pdf.setTextColor(0, 0, 0)
    pdf.text(detail.value, 80, yPosition)
    yPosition += 8
  })

  // Add QR Code section
  if (data.qrCode && data.qrCode.startsWith('data:image')) {
    try {
      // Calculate position for QR code (after the details section)
      const qrCodeY = yPosition + 20
      const qrCodeSize = 50 // Size of QR code in PDF

      // Add QR code image to PDF
      pdf.addImage(data.qrCode, 'PNG', 20, qrCodeY, qrCodeSize, qrCodeSize)

      // Add label for QR code
      pdf.setFontSize(14)
      pdf.setTextColor(41, 128, 185)
      pdf.text('QR Code for Verification', 80, qrCodeY + 5)

      pdf.setFontSize(10)
      pdf.setTextColor(100, 100, 100)
      pdf.text('Scan this QR code with the VAT Invoice Registry app to verify authenticity', 80, qrCodeY + 15)

    } catch (error) {
      console.error('Error adding QR code to PDF:', error)
      // Fallback to text placeholder if image embedding fails
      pdf.setFontSize(14)
      pdf.setTextColor(41, 128, 185)
      pdf.text('QR Code for Verification', 20, yPosition + 20)

      pdf.setFontSize(10)
      pdf.setTextColor(100, 100, 100)
      pdf.text('QR code image could not be embedded in PDF', 20, yPosition + 35)
    }
  }

  // Footer
  pdf.setFontSize(8)
  pdf.setTextColor(150, 150, 150)
  pdf.text('Generated by VAT Invoice Registry - Blockchain-Powered Invoice Verification', 20, pdf.internal.pageSize.height - 20)

  // Generate filename and download
  const filename = `invoice-${data.invoiceId}.pdf`
  pdf.save(filename)
}
